= simple_form_for @ba_spec, :html => { :class => 'form-horizontal' } do |f|
  = f.error_notification
  .row.span6.form-inputs
    = f.input :deliverable_id, :collection => Milestone.all, :as => :grouped_select, :group_method => :deliverables, :input_html => { :class => 'span4' }, :include_blank => true
    = f.input :user_id, :collection => User.joins(:user_roles).where('user_roles.role_id' => 1)
    = f.input :name, :placeholder => t('placeholder.document_name'),                                    :input_html => { :class => 'span4' }
    = f.input :effort, :placeholder => t('placeholder.effort') , :hint => t('hint.effort_estimate'),    :input_html => { :class => 'span1' }
    = f.input :progress,                                                              :input_html => { :class => 'span1' }
    = f.input :comments,              :as => :text,                                   :input_html => { :rows => 4, :class => 'span4' }

  .row.span4.form-inputs
    = f.input :internal_review_date,  :as => :string,                                 :input_html => { :class => 'span2 date' }
    = f.input :internal_review_signoff
    = f.input :external_review_date,  :as => :string,                                 :input_html => { :class => 'span2 date' }
    = f.input :external_review_signoff
    = f.input :final_version,         :as => :string,                                 :input_html => { :class => 'span2 date' }

  .row
  .form-actions
    = submit_button f
    '
    = cancel_button f
    
/ 
/   This section below is really good. I may need to revisit and re-implement these things. For now I will just settle on having a grouped
/   deliverable select
/ 
    / = f.input :project, :collection => Project.all, :input_html => { :class => 'span4' }  
    / = f.input :milestone, :collection => Project.all, :as => :grouped_select, :group_method => :milestones, :input_html => { :class => 'span4' }

table.audit-log
  thead
    tr
      th Timestamp
      th User
      th Updated Attribute
      th Old value
      th New value
      
  tbody
    - @ba_spec.versions.each do |h|
      - @ba_spec.audited_attributes.each do |attribute|
        / If there is a next entry in the audit log, compare the previous entry with the next entry to detect if there had been any changes
        / If there is no next entry, then compare the previous entry with the current model to detect if there had been any changes
        - if (h.next and (h.reify.send(attribute) != h.next.reify.send(attribute))) or (!h.next and (h.reify.send(attribute) != @ba_spec.send(attribute)))
          tr
            td = h.created_at
            td = User.find(h.whodunnit).name
            td = @ba_spec.class.human_attribute_name(attribute)
            td = h.reify.send(attribute)
            td 
              - if h.next
                = h.next.reify.send(attribute) 
              - else
                 = @ba_spec.send(attribute)  